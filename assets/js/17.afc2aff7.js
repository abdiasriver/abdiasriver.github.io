(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{202:function(t,e,a){"use strict";a.r(e);var s=a(0),n=Object(s.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),a("p",[t._v("In this three-part series, I will show you one way to simplify and manage\nmultiple Arch Linux systems using a custom repo, a set of meta-packages and a\nscripted installer. Each part is standalone and can be used by its self, but\nthey are designed to build upon and complement each other each focusing on a\ndifferent part of the problem.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Part 1:")]),t._v(" "),a("router-link",{attrs:{to:"/linux/archlinux-repo-in-aws-bucket/"}},[t._v("Hosting an Arch Linux Repo in an Amazon S3 Bucket")])],1),t._v(" "),t._m(1),t._v(" "),a("li",[a("strong",[t._v("Part 3:")]),t._v(" "),a("router-link",{attrs:{to:"/linux/archlinux-installer/"}},[t._v("Creating a Custom Arch Linux Installer")])],1)]),t._v(" "),t._m(2),t._v(" "),a("p",[t._v("There are a fair few applications that aim to make this easier, most notably\nthe plethora of "),a("em",[a("a",{attrs:{href:"https://wiki.archlinux.org/index.php/Dotfiles",target:"_blank",rel:"noopener noreferrer"}},[t._v("dotfile managers"),a("OutboundLink")],1)]),t._v(" out there. I have used a few of these over\nthe years and they all suffer from the same problem; they are only designed to\nmanage user files. I want to manage my whole system. I used "),a("a",{attrs:{href:"https://saltstack.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("SaltStack"),a("OutboundLink")],1),t._v(" for "),a("a",{attrs:{href:"https://github.com/mdaffin/salt-arch",target:"_blank",rel:"noopener noreferrer"}},[t._v("a\nwhile"),a("OutboundLink")],1),t._v(" but started to dislike it when it became hard to debug\nproblems (salts error handling is quite bad) and I kept forgetting to run\n"),a("code",[t._v("salt-call state.apply")]),t._v(" to resync my systems.")]),t._v(" "),a("p",[t._v("My ultimate goal is to find a way to automatically install Arch Linux on a\nsystem with minimal input (only things like hostname, username, password etc).\nAs well as for a way to automatically update all of my systems whenever I\nchange a config or add/remove a package. Ideally just running "),a("code",[t._v("pacman -Syu")]),t._v(" on\na system to sync all the configs from a master set. In this post, I will show\nyou how I solved this second goal using the repo I set up in my "),a("router-link",{attrs:{to:"/linux/archlinux-repo-in-aws-bucket/"}},[t._v("last post")]),t._v("\nwith a set of custom "),a("a",{attrs:{href:"https://wiki.archlinux.org/index.php/creating_packages",target:"_blank",rel:"noopener noreferrer"}},[t._v("meta-packages"),a("OutboundLink")],1),t._v(".")],1),t._v(" "),t._m(3),t._v(" "),a("p",[t._v("Simply put, meta-packages are packages that do nothing but depend on other\npackages. The result of this is that you can install a group of packages at\nonce by installing a single meta-packages. Now, Arch Linux has a similar\nconcept; package groups, and while they serve a similar purpose they are\nsuitably different. This difference is when you add or remove dependencies -\ngroups will not install/remove additional dependencies whereas meta packages\nwill, this is exactly what we want. When a dependency is added all our systems\nto automatically install it when they update.")]),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),a("p",[t._v("You can create as many or as few meta-packages as you require. The more you\nhave, the more there is to maintain. The less you have the less flexible they\nbecome. How many you require depends on your needs but I recommend starting\nwith few large packages that do the bulk of the work that is common to all or\nmost of your systems. Then create smaller more specific ones, that depends on\nthese more general ones.")]),t._v(" "),a("p",[t._v("For example, I have "),a("a",{attrs:{href:"https://github.com/mdaffin/arch-pkgs/tree/5ce54e82b1d763c18493fda3d9bb78bd8a5b9786/pkg/base",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("mdaffin-base")]),a("OutboundLink")],1),t._v(" that contains everything that I require on\nall of my systems. Then "),a("a",{attrs:{href:"https://github.com/mdaffin/arch-pkgs/tree/5ce54e82b1d763c18493fda3d9bb78bd8a5b9786/pkg/desktop",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("mdaffin-desktop")]),a("OutboundLink")],1),t._v(" for any system that needs a desktop\ninterface, such as my desktops and laptops. This package depends on\n"),a("a",{attrs:{href:"https://github.com/mdaffin/arch-pkgs/tree/5ce54e82b1d763c18493fda3d9bb78bd8a5b9786/pkg/base",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("mdaffin-base")]),a("OutboundLink")],1),t._v(" so I still only have one package to install. But then I have a\n"),a("a",{attrs:{href:"https://github.com/mdaffin/arch-pkgs/tree/5ce54e82b1d763c18493fda3d9bb78bd8a5b9786/pkg/dell-xps-13",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("mdaffin-dell-xps-13")]),a("OutboundLink")],1),t._v(" which contains very specific settings only useful on my\nlaptop. This, in turn, depends on "),a("a",{attrs:{href:"https://github.com/mdaffin/arch-pkgs/tree/5ce54e82b1d763c18493fda3d9bb78bd8a5b9786/pkg/desktop",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("mdaffin-desktop")]),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("Separate to this I have "),a("a",{attrs:{href:"https://github.com/mdaffin/arch-pkgs/tree/5ce54e82b1d763c18493fda3d9bb78bd8a5b9786/pkg/devel",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("mdaffin-devel")]),a("OutboundLink")],1),t._v(" package that contains a whole bunch\nof development tools and languages that I commonly use and want on any system\nthat I do development on. Changing a system to a development system becomes as\nsimple as "),a("code",[t._v("pacman -S mdaffin-devel")]),t._v(".")]),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),a("p",[t._v("Or to see all of our meta-packages are install run the following.")]),t._v(" "),t._m(9),a("p",[t._v("This is a hidden and quite powerful feature of this method. Whereas on most\nArch Linux systems you might see hundreds of packages explicitly installed with\nno way to track why you installed them, we only have a handful. This is\nactually very useful as it lets you track bloat on your systems over time where\nyou can either promote them to one of your meta-packages if you use them a lot\nor remove them from your systems if you don't. You also have the option of\ncommenting the dependencies in your meta-packages to remind you why you added\nthem.")]),t._v(" "),t._m(10),t._v(" "),a("p",[t._v("All you require to build a meta-package is a "),a("code",[t._v("PKGBUILD")]),t._v(" file along with any\nconfigs you want. You can read more about the finer details about "),a("a",{attrs:{href:"https://wiki.archlinux.org/index.php/creating_packages#Meta_packages_and_groups",target:"_blank",rel:"noopener noreferrer"}},[t._v("creating a\npackage"),a("OutboundLink")],1),t._v(" and the "),a("a",{attrs:{href:"https://wiki.archlinux.org/index.php/PKGBUILD",target:"_blank",rel:"noopener noreferrer"}},[t._v("PKGBUILD"),a("OutboundLink")],1),t._v(" file structure, both of which are worth a read or\nat least to look up as a reference.")]),t._v(" "),t._m(11),t._v(" "),t._m(12),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),a("p",[t._v("Then surround all of these with quotes and include them in the depends list\nlike so.")]),t._v(" "),t._m(16),a("p",[t._v("And there, that's our first meta package. Although, it's currently not much\nmore helpful than the base group so go ahead and add any additional packages\nyou want. For example, I have added these (as well as many others) to the list\nas I use them on all of my systems.")]),t._v(" "),t._m(17),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),a("p",[t._v("With this, pacman will drop our configs in the given locations when the package\nis installed. It will replace them if we upgrade the package in the future and\nwill prevent any other package from directly modifying them.")]),t._v(" "),t._m(22),t._v(" "),a("p",[t._v("However, most packages drop a default config file to give the users a base to\nstart editing and do not support config directories. These are problematic as\npacman will not allow us to simply install our config over them. Unfotinuatly,\npacman has no nice way around this limitation but there is a slightly hacky way\nto work around the problem using pacman's install hooks.")]),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),a("p",[t._v("Then we define the hooks in a separate install file, which is a bash script\nwith at least one of the following functions defined.")]),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),a("p",[t._v("These run during an install or upgrade and copy the packaged configs to their\ndestination, overwriting the configs that the upstream package dropped.")]),t._v(" "),t._m(30),t._v(" "),t._m(31),a("p",[t._v("Which tells makepkg to include this install script in the package and pacman\nwill run the relevant functions during an install or upgrade of the package.")]),t._v(" "),t._m(32),t._v(" "),a("p",[t._v("One more common thing we want to do is enable/start services. Typically, Arch\nLinux does not auto enable or start services on a package install, instead, it\nleaves this up to the user. Normally, this is a better approach as it lets you\nconfigure them before they are started for the first time. But we are\nconfiguring the applications with our meta-packages so why not enable and start\nthe services as well.")]),t._v(" "),t._m(33),t._v(" "),t._m(34),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._m(40),t._v(" "),t._m(41),t._v(" "),t._m(42),t._m(43),t._v(" "),a("p",[t._v("For the last step, we will install this package into a repo, such as the one I\nshowed you how to create in my "),a("router-link",{attrs:{to:"/linux/archlinux-repo-in-aws-bucket/"}},[t._v("last post")]),t._v(".")],1),t._v(" "),t._m(44),t._m(45),t._v(" "),t._m(46),t._v(" "),a("p",[t._v("Now that we can create meta-package and publish them for use let's place these\nin a git repo (or another version control system if you prefer) and write a\nwrapper script to make building/uploading the packages even easier. You can\nfind "),a("a",{attrs:{href:"https://github.com/mdaffin/arch-pkgs",target:"_blank",rel:"noopener noreferrer"}},[t._v("my repo"),a("OutboundLink")],1),t._v(" on GitHub, feel free to use it as a reference or clone it to\ncreate your own but the packages in there are tuned to my liking and so I\nencourage you to create your own with how you like your systems setup.")]),t._v(" "),t._m(47),t._m(48),t._v(" "),t._m(49),a("p",[t._v("But there a whole bunch of temporary/generated files we don't want to commit\nto. Let's add a gitignore for these.")]),t._v(" "),t._m(50),a("p",[t._v("Now stage these files and check we are not including anything we don't want.")]),t._v(" "),t._m(51),t._m(52),t._v(" "),t._m(53),t._m(54),t._v(" "),a("p",[t._v("The commands above can be wrapped into a helper script to make building and\nuploading the packages very simple. Here is the script in its entirety.")]),t._v(" "),t._m(55),a("p",[t._v("It starts with some boilerplate code which I will skip over, read [this\npost][bash-strict-mode] for more details about it.")]),t._v(" "),t._m(56),t._v(" "),t._m(57),t._v(" "),a("p",[t._v("Lastly, we sync down the remote database to a local cache, add the built\npackages to the database then upload all the artefacts back up to the S3\nbucket.")]),t._v(" "),t._m(58),t._v(" "),t._m(59),t._v(" "),a("p",[t._v("Here are some examples of system config meta-packages that others have created:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/mdaffin/arch-pkgs/tree/master/pkg/mdaffin",target:"_blank",rel:"noopener noreferrer"}},[t._v("mdaffin/arch-pkgs"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/Earnestly/pkgbuilds/tree/master/system-config",target:"_blank",rel:"noopener noreferrer"}},[t._v("Earnestly/pkgbuilds"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/Foxboron/PKGBUILDS/tree/master/foxboron-system",target:"_blank",rel:"noopener noreferrer"}},[t._v("Foxboron/PKGBUILDS"),a("OutboundLink")],1)])]),t._v(" "),t._m(60),t._v(" "),a("p",[t._v("Now, this is quite a lot of work to set up initially and might not be worth it\nif you only manage one or two Arch Linux systems that you rarely change. But if\nyou manage multiple systems and want to keep them in sync it can be worth the\neffort. Once you have set everything up for the first time tweaks to the\npackages are much simpler to make and ongoing maintenance less time consuming\nthan manually ensuring all of your systems have your latest settings.")]),t._v(" "),a("p",[t._v("It is also worth noting that this does not solve the issue of keeping user\nfiles in sync. But most of the user files I want to keep in sync also have\nsystem level defaults that I can keep in sync instead lowering the number of\nfiles I need to manage in my home directory. This works best when you only have\none user, or all your users are fine with the same default settings, but they\ncan always override them within their own home directory like you normally\nwould.")]),t._v(" "),a("p",[a("em",[a("a",{attrs:{href:"https://www.reddit.com/r/archlinux/comments/7v7g4w/managing_multiple_arch_linux_systems_with/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Discuss on Reddit"),a("OutboundLink")],1)])])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"automating-arch-linux-part-2-managing-arch-linux-with-meta-packages"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#automating-arch-linux-part-2-managing-arch-linux-with-meta-packages","aria-hidden":"true"}},[this._v("#")]),this._v(" Automating Arch Linux Part 2: Managing Arch Linux with Meta Packages")])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[e("strong",[this._v("Part 2:")]),this._v(" "),e("em",[this._v("Managing Arch Linux with Meta Packages")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("I really enjoy Arch Linux for its customisation - you can truly make it "),e("em",[this._v("your")]),this._v("\nown. But while crafting your system exactly how you want it once can be a fun\nand rewarding experience, repeating this process on multiple computers becomes\ntedious. Worst, it very easily leads to inconsistencies between each system as\nyou forget things that you configured or as you slowly evolve your configs on\neach system you set up. The more systems you manage the worst this problem\nbecomes.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"what-are-meta-packages"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#what-are-meta-packages","aria-hidden":"true"}},[this._v("#")]),this._v(" What are Meta-Packages")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Now, we are going to abuse this concept slightly and not only use them to\ninstall groups of packages via dependencies but also to install related system\nconfiguration. This is not something "),e("code",[this._v("pacman")]),this._v(" is really designed to do and\nresults in some hacky workaround which we will discuss below. The end result,\nhowever, works very well in practice.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"organising-our-meta-packages"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#organising-our-meta-packages","aria-hidden":"true"}},[this._v("#")]),this._v(" Organising Our Meta-Packages")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("In the future, I might have a "),e("code",[this._v("mdaffin-laptop")]),this._v(" or "),e("code",[this._v("mdaffin-server")]),this._v(" as or when I\ndecide I will require them but for now, these systems will be based off one of\nthe existing packages.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("One major advantage of using meta-packages like this is it is very simple to\nsee how your system is configured with simple "),e("code",[this._v("pacman")]),this._v(" commands, for example,\nto see packages that were explicitly installed run the following.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[this._v("% pacman -Qe\nhugo 0.34-1\nkrita 3.3.3-1\nmdaffin-dell-xps-13 0.0.2-1\nmdaffin-devel 0.0.3-1\npowertop 2.9-1\ns3fs-fuse 1.80-2\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[this._v("% pacman -Qqs mdaffin-\nmdaffin-base\nmdaffin-dell-xps-13\nmdaffin-desktop\nmdaffin-devel\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"creating-a-meta-package"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-meta-package","aria-hidden":"true"}},[this._v("#")]),this._v(" Creating a Meta-Package")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("So, the first part of creating meta-packages is specifying dependencies. For\nthis we need a minimal "),e("code",[this._v("PKGBUILD")]),this._v(" file, all you need to do is fill in the\ndetails with your own and flesh out the dependency list.")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("# Maintainer: Michael Daffin <michael@daffin.io>")]),t._v("\npkgname"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("mdaffin-base\npkgver"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("0.0.1\npkgrel"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("1\npkgdesc"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"Base system configuration for mdaffin systems"')]),t._v("\narch"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'any'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nurl"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"https://github.com/mdaffin/arch-pkgs"')]),t._v("\nlicense"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'MIT'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndepends"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("# package list")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"adding-dependencies"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#adding-dependencies","aria-hidden":"true"}},[this._v("#")]),this._v(" Adding Dependencies")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("List the packages you want to be installed with this package in the "),e("code",[this._v("depends")]),this._v("\nblock, as quoted strings separated by white space (such as a newline). A good\nset of packages to start with is the "),e("code",[this._v("base")]),this._v(" group. But there is a problem - you\ncannot specify groups of packages as dependencies. Instead, we must first\nexpand the group to get a list of packages in that group.")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v(" % pacman -Sqg base\n"),a("span",{attrs:{class:"token function"}},[t._v("bash")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("bzip2")]),t._v("\ncoreutils\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n"),a("span",{attrs:{class:"token function"}},[t._v("which")]),t._v("\nxfsprogs\n")])])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("depends"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'bash'")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'bzip2'")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'coreutils'")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n    "),a("span",{attrs:{class:"token string"}},[t._v("'which'")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'xfsprogs'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("    "),a("span",{attrs:{class:"token string"}},[t._v("'sudo'")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'neovim'")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'avahi'")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'nss-mdns'")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"adding-config-files"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#adding-config-files","aria-hidden":"true"}},[this._v("#")]),this._v(" Adding Config Files")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Adding a config file to a package is done just like any other package except\nyou also add it to the "),e("code",[this._v("backup")]),this._v(" array in the "),e("code",[this._v("PKGBUILD")]),this._v(". This instructs pacman\nto not replace the file during an upgrade if the user has modified it at all.\nBut we don't want this for our package - rather, we want to treat config files\nas any other package file so that it is replaced on an upgrade. We do this to\nstop the configs from drifting apart at the risk of losing some changes to one\nsystem if you don't add those changes back to the package.")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("p",[t._v("Some packages don't drop a default config, while others will read and merge all\nfiles inside a certain directory. These types of packages are easy to add\nconfigs for, we just add the file to our package and let packman place it in\nthe correct place. To do this place the configs you want next to the "),a("code",[t._v("PKGBUILD")]),t._v("\nand add it to the "),a("code",[t._v("sources")]),t._v(" array with a corresponding entry in "),a("code",[t._v("md5sum")]),t._v(" or\n"),a("code",[t._v("sha256sum")]),t._v(" (or equivalent) arrays. Then add an "),a("code",[t._v("install")]),t._v(" line in the "),a("code",[t._v("package")]),t._v("\nfunction to copy the file to the correct location inside "),a("code",[t._v("$pkgdir")]),t._v(", like so:")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("source"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'vconsole.conf'")]),t._v("\n        "),a("span",{attrs:{class:"token string"}},[t._v("'sudoers.wheel'")]),t._v("\n        "),a("span",{attrs:{class:"token string"}},[t._v("'mdaffin-base.sh'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmd5sums"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'12733d28ff3b5352ea1c3d84b27cd6bd'")]),t._v("\n         "),a("span",{attrs:{class:"token string"}},[t._v("'52719e50fbbea8255275964ba70aa0a7'")]),t._v("\n         "),a("span",{attrs:{class:"token string"}},[t._v("'9463e8e19ee914684f7bd5190243aa3f'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\npackage"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("install")]),t._v(" -Dm 0644 vconsole.conf "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("$pkgdir")]),t._v('/etc/vconsole.conf"')]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("install")]),t._v(" -Dm 0640 sudoers.wheel "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("$pkgdir")]),t._v('/etc/sudoers.d/wheel"')]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("install")]),t._v(" -Dm 0755 mdaffin-base.sh "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("$pkgdir")]),t._v('/etc/profile.d/mdaffin-base.sh"')]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"overwriting-existing-configs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#overwriting-existing-configs","aria-hidden":"true"}},[this._v("#")]),this._v(" Overwriting Existing Configs")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Instead of dropping the config file directly into place, we can drop it\nalongside the existing file, that way we get no conflict with other packages.\nThen we can use the "),e("code",[this._v("post_install")]),this._v(" and "),e("code",[this._v("post_upgrade")]),this._v(" hooks to copy our config\ninto place.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("The downside of this approach is that pacman does not own or manage the\nlifecycle of this file, at least not with our package. It will still treat it\nas a config file for the original package, to be backed up or removed upon the\nremoval of the original package. It will also not be reverted when we remove\nour package, although, this can be worked around by using the "),e("code",[this._v("post_install")]),this._v("\nhook to backup the original config and the "),e("code",[this._v("pre_remove")]),this._v(" hook to restore it if\nyou desire. If anyone knows of a better solution to this problem I would love\nto hear from you.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Let's take a look at how I did this with my i3 config file in my\n"),e("code",[this._v("mdaffin-desktop")]),this._v(" package. First, we install the config file like we did in the\nprevious section, but this time next to the original package's config.")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("source"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'i3-config'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmd5sums"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'d9dcd133475af688ed86a879821c9384'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npackage"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("install")]),t._v(" -Dm 0644 i3-config "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("$pkgdir")]),t._v('/etc/i3/mdaffin-desktop-config"')]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ul",[a("li",[a("code",[t._v("pre_install()")]),t._v(" - runs before the package contents are installed the first\ntime the package is installed")]),t._v(" "),a("li",[a("code",[t._v("post_install()")]),t._v(" - after the package contents are installed the first time\nthe package is installed")]),t._v(" "),a("li",[a("code",[t._v("pre_upgrade()")]),t._v(" - before the package contents are installed when a package is\nbeing upgraded")]),t._v(" "),a("li",[a("code",[t._v("post_upgrade()")]),t._v(" - after the package contents are installed when a package is\nbeing upgraded")]),t._v(" "),a("li",[a("code",[t._v("pre_remove()")]),t._v(" - before the package contents are removed when a package is\nbeing removed")]),t._v(" "),a("li",[a("code",[t._v("post_remove()")]),t._v(" - after the package contents are removed when a package is\nbeing removed")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Let's call this file "),e("code",[this._v("mdaffin-desktop.install")]),this._v(", once again place it next to the\n"),e("code",[this._v("PKGBUILD")]),this._v(" file. It can be called whatever you want but\n"),e("code",[this._v("<package-name>.install")]),this._v(" is how it is conventionally named.")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("post_install"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    post_upgrade\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\npost_upgrade"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("cp")]),t._v(" /etc/i3/mdaffin-desktop-config /etc/i3/config\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Next, we need to tell makepkg about this install file by adding the following\nto "),e("code",[this._v("PKGBUILD")]),this._v(".")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{attrs:{class:"token punctuation"}},[this._v("..")]),this._v(".\ninstall"),e("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v("mdaffin-desktop.install\n"),e("span",{attrs:{class:"token punctuation"}},[this._v("..")]),this._v(".\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"starting-services"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#starting-services","aria-hidden":"true"}},[this._v("#")]),this._v(" Starting Services")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("The "),e("code",[this._v("post_install")]),this._v(" hook from the previous section can also be used to get\n"),e("code",[this._v("systemctl")]),this._v(" to start and enable the service on the first install, where the\nuser is then free to disable/stop it thereafter. We could also add it to the\n"),e("code",[this._v("post_upgrade")]),this._v(" hook to ensure it gets reenabled after an upgrade, or if you add\nan extra service to a package later on. For example, my desktop package has\nthese in the install script (in addition to the things in the previous\nsection).")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("post_install"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    systemctl "),a("span",{attrs:{class:"token function"}},[t._v("enable")]),t._v(" --now sddm\n    systemctl "),a("span",{attrs:{class:"token function"}},[t._v("enable")]),t._v(" --now avahi-daemon\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("p",[t._v("Note that "),a("code",[t._v("--now")]),t._v(" on a "),a("code",[t._v("systemctl enable")]),t._v(" causes it to also start the service\nin addition to enabling it, basically equivalent to "),a("code",[t._v("systemctl start")]),t._v(" and\n"),a("code",[t._v("systemctl enable")]),t._v(" in one command. "),a("code",[t._v("systemctl")]),t._v(" will also behave correctly\ninside a chroot environment (such as when pacstraping a system).")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"building-the-package"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#building-the-package","aria-hidden":"true"}},[this._v("#")]),this._v(" Building the Package")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("p",[t._v("Once you have crafted a package to your liking it is time to build it. This can\nbe done with "),a("code",[t._v("makepkg")]),t._v(" as anyone who has built a package from AUR should be\naware. But instead, I will make use of its lesser-known wrapper "),a("code",[t._v("makechrootpkg")]),t._v("\n(part of the same package as "),a("code",[t._v("makepkg")]),t._v("). While a little bit involved it does\nprovide a clean build for packages by building them in a fresh chroot\nenvironment rather than on your host system. The downside is that it takes some\nprep work and is a little slower. Feel free to continue to use "),a("code",[t._v("makepkg")]),t._v(" if you\nwant.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("To save time on installing a base arch system into each chroot, "),e("code",[this._v("makechrootpkg")]),this._v("\nrelies on a preprepared root which it copies for each package it builds. We can\ncreate this root fs by running "),e("code",[this._v("mkarchroot")]),this._v(".")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{attrs:{class:"token function"}},[this._v("mkdir")]),this._v(" -p ./chroots\nmkarchroot -C /etc/pacman.conf ./chroots/root base-devel\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("chroot")]),this._v(" is where all of the chroots for each of our build environments will\nlive and "),e("code",[this._v("root")]),this._v(" is the base root fs "),e("code",[this._v("makechrootpkg")]),this._v(" will use as a base for each\nenvironment by default.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("While inside our packages directory run "),e("code",[this._v("makechrootpkg")]),this._v(" and tell it what\ndirectory to use for the chroot environments ("),e("code",[this._v("-r")]),this._v(").")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[this._v("makechrootpkg -cur ./chroots\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Once done you will end up with a "),e("code",[this._v("<package>-<version>.pkg.tar.xz")]),this._v(" package in\nthe current directory just like with "),e("code",[this._v("makepkg")]),this._v(".")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("# Copy the live repo down")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" -p local-repo\ns3cmd "),a("span",{attrs:{class:"token function"}},[t._v("sync")]),t._v(" s3://mdaffin-arch/repo/x86_64/mdaffin."),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("db,files"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(".tar.xz local-repo/\n"),a("span",{attrs:{class:"token function"}},[t._v("ln")]),t._v(" -sf local-repo/mdaffin.db.tar.xz local-repo/mdaffin.db\n"),a("span",{attrs:{class:"token function"}},[t._v("ln")]),t._v(" -sf local-repo/mdaffin.files.tar.xz local-repo/mdaffin.files\n"),a("span",{attrs:{class:"token comment"}},[t._v("# Add the packages to the repo")]),t._v("\nrepo-add local-repo/mdaffin.db.tar.xz *.pkg.tar.xz\n"),a("span",{attrs:{class:"token comment"}},[t._v("# Upload the packages as well as the changed repo")]),t._v("\ns3cmd "),a("span",{attrs:{class:"token function"}},[t._v("sync")]),t._v(" --follow-symlinks --acl-public *.pkg.tar.xz \\\n    local-repo/mdaffin."),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("db,files"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(",.tar.xz"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \\\n    s3://mdaffin-arch/repo/x86_64/\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("You can now install this package like you do any other package with "),e("code",[this._v("pacman")]),this._v(",\nas long as you have your repo added to "),e("code",[this._v("/etc/pacman.conf")]),this._v(".")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"git-repo-and-scripting-the-build"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-repo-and-scripting-the-build","aria-hidden":"true"}},[this._v("#")]),this._v(" Git Repo and Scripting the Build")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{attrs:{class:"token function"}},[this._v("mkdir")]),this._v(" arch-pkgs\n"),e("span",{attrs:{class:"token function"}},[this._v("cd")]),this._v(" arch-pkgs\n"),e("span",{attrs:{class:"token function"}},[this._v("git")]),this._v(" init\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("I like to put all of my packages inside "),e("code",[this._v("pkg/<package name>")]),this._v(" to keep them in\none place. So let's copy the package we created above to that location")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{attrs:{class:"token function"}},[this._v("mkdir")]),this._v(" pkg\n"),e("span",{attrs:{class:"token function"}},[this._v("cp")]),this._v(" -r ~/mdaffin-base pkg/mdaffin-base\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{attrs:{class:"token function"}},[this._v("cat")]),this._v(" "),e("span",{attrs:{class:"token operator"}},[this._v("<<")]),e("span",{attrs:{class:"token string"}},[this._v("'EOF'")]),this._v(" "),e("span",{attrs:{class:"token operator"}},[this._v(">")]),this._v(".gitignore\n*.pkg.tar.xz\n*.tar.gz\n/pkg/**/pkg/\n/pkg/**/src/\nrepo/\n*.log\n/root/\nEOF\n")])])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("% "),a("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" add "),a("span",{attrs:{class:"token keyword"}},[t._v(".")]),t._v("\n% "),a("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),a("span",{attrs:{class:"token string"}},[t._v('"git rm --cached <file>..."')]),t._v(" to unstage"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    new file:   .gitignore\n    new file:   pkg/mdaffin-base/PKGBUILD\n    new file:   pkg/mdaffin-base/mdaffin-base.install\n    new file:   pkg/mdaffin-base/mdaffin-base.sh\n    new file:   pkg/mdaffin-base/sudoers.wheel\n    new file:   pkg/mdaffin-base/vconsole.conf\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("If anything is listed that you don't want, just add it to the "),e("code",[this._v(".gitignore")]),this._v(" and\nrun "),e("code",[this._v("git reset <file>")]),this._v(". Repeat until you are happy then commit.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{attrs:{class:"token function"}},[this._v("git")]),this._v(" commit -m "),e("span",{attrs:{class:"token string"}},[this._v('"My first package"')]),this._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"the-build-script"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#the-build-script","aria-hidden":"true"}},[this._v("#")]),this._v(" The Build Script")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token shebang important"}},[t._v("#!/bin/bash")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("# Wraps aursync command to mount an amazon s3 bucket which contains a repository")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),t._v(" -uo pipefail\n"),a("span",{attrs:{class:"token function"}},[t._v("trap")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'s="),a("span",{attrs:{class:"token variable"}},[t._v("$?")]),t._v('; echo "'),a("span",{attrs:{class:"token variable"}},[t._v("$0")]),t._v(': Error on line "'),a("span",{attrs:{class:"token variable"}},[t._v("$LINENO")]),t._v('": '),a("span",{attrs:{class:"token variable"}},[t._v("$BASH_COMMAND")]),t._v('"; exit '),a("span",{attrs:{class:"token variable"}},[t._v("$s")]),t._v("'")]),t._v(" ERR\n\nREMOTE_PATH"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("s3://mdaffin-arch/repo/x86_64\nLOCAL_PATH"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token variable"}},[t._v("$HOME")]),t._v("/.local/share/arch-repo\nREPO_NAME"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("mdaffin\n\nPACKAGES"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token variable"}},[t._v("${@:-pkg/*}")]),t._v("\nCHROOT"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("$PWD")]),t._v('/root"')]),t._v("\n\n"),a("span",{attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" -p "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("$LOCAL_PATH")]),t._v('"')]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" -p "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("$CHROOT")]),t._v('"')]),t._v("\n\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" -d "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("$CHROOT")]),t._v('/root"')]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" mkarchroot -C /etc/pacman.conf "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("$CHROOT")]),t._v('/root"')]),t._v(" base base-devel\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" package "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{attrs:{class:"token variable"}},[t._v("$PACKAGES")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("cd")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("$package")]),t._v('"')]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("rm")]),t._v(" -f *.pkg.tar.xz\n    makechrootpkg -cur "),a("span",{attrs:{class:"token variable"}},[t._v("$CHROOT")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("cd")]),t._v(" -\n"),a("span",{attrs:{class:"token keyword"}},[t._v("done")]),t._v("\n\ns3cmd "),a("span",{attrs:{class:"token function"}},[t._v("sync")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("$REMOTE_PATH")]),t._v("/"),a("span",{attrs:{class:"token variable"}},[t._v("$REPO_NAME")]),t._v('"')]),t._v("."),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("db,files"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(".tar.xz "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("$LOCAL_PATH")]),t._v('/"')]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("ln")]),t._v(" -sf "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("$REPO_NAME")]),t._v('.db.tar.xz"')]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("$LOCAL_PATH")]),t._v("/"),a("span",{attrs:{class:"token variable"}},[t._v("$REPO_NAME")]),t._v('.db"')]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("ln")]),t._v(" -sf "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("$REPO_NAME")]),t._v('.files.tar.xz"')]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("$LOCAL_PATH")]),t._v("/"),a("span",{attrs:{class:"token variable"}},[t._v("$REPO_NAME")]),t._v('.files"')]),t._v("\n\nrepo-add "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("$LOCAL_PATH")]),t._v("/"),a("span",{attrs:{class:"token variable"}},[t._v("$REPO_NAME")]),t._v('.db.tar.xz"')]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("${PACKAGES[@]}")]),t._v('/"')]),t._v("*.pkg.tar.xz\ns3cmd "),a("span",{attrs:{class:"token function"}},[t._v("sync")]),t._v(" --follow-symlinks --acl-public \\\n    "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("${PACKAGES[@]}")]),t._v('/"')]),t._v("*.pkg.tar.xz \\\n    "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("$LOCAL_PATH")]),t._v("/"),a("span",{attrs:{class:"token variable"}},[t._v("$REPO_NAME")]),t._v('"')]),t._v("."),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("db,files"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(",.tar.xz"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \\\n    "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("$REMOTE_PATH")]),t._v('/"')]),t._v("\n")])])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("p",[t._v("Some useful variables are then defined, "),a("code",[t._v("${@:-pkg/*}")]),t._v(" means take all arguments,\nbut if there are none it defaults to "),a("code",[t._v("pkg/*")]),t._v(". This allows us to build a single\npackage, any number of packages or by default all packages. "),a("code",[t._v("REMOTE_PATH")]),t._v(" and\n"),a("code",[t._v("REPO_NAME")]),t._v(" should be changed to match your repo.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("We create the chroot directory and init the main root fs if it does not already\nexist. Then loop over all the packages to build them one at a time with\n"),e("code",[this._v("makechrootpkg")]),this._v(", during which we delete all old package files left over from\nprevious builds. This keeps the list of built packages down and ensures we only\nupload the latest build version.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Some of this should look familiar from the script we created in the last post.\nIt would be handy to store both this script and the "),e("code",[this._v("aursync")]),this._v(" script from my\nprevious post inside our repo under the "),e("code",[this._v("./bin/")]),this._v(" directory.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"example-config-meta-packages"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example-config-meta-packages","aria-hidden":"true"}},[this._v("#")]),this._v(" Example Config Meta-Packages")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"summary"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#summary","aria-hidden":"true"}},[this._v("#")]),this._v(" Summary")])}],!1,null,null,null);n.options.__file="index.md";e.default=n.exports}}]);